Objective - To get time accurate financial information into an database for easy analysis, back testing and trade decision making.

Tables and fields:
Financial securities:
	Each Financial secuirty will have their own table.  There might be multiple tables from multiple datasources.
		Each table will have a time stamp, along with the following fields.  Possibly more.
			Bid
			Ask
			Bid Size
			Ask Size
			Total volume up to that point.
			Last
			Last Volume

Company Data:
	Each Financial security might have financial data.  The time stamp must be accurate


Economic Data:
	Economic data will be included.

Other Data:
	Twitter, and alternative sources of data too.

TWS specific notes:
Need to design tables for every single case.

TWS Code todo:
    Setup auto tws startup and auto excel preload.


Market Data types
Live	1	Live market data is streaming data relayed back in real time. Market data subscriptions are required to receive live market data.
Frozen	2	Frozen market data is the last data recorded at market close. In TWS, Frozen data is displayed in gray numbers. When you set the market data type to Frozen, you are asking TWS to send the last available quote when there is not one currently available. For instance, if a market is currently closed and real time data is requested, -1 values will commonly be returned for the bid and ask prices to indicate there is no current bid/ask data available. TWS will often show a 'frozen' bid/ask which represents the last value recorded by the system. To receive the last know bid/ask price before the market close, switch to market data type 2 from the API before requesting market data. API frozen data requires TWS/IBG v.962 or higher and the same market data subscriptions necessary for real time streaming data.
Delayed	3
Free, delayed data is 15 - 20 minutes delayed. In TWS, delayed data is displayed in brown background. When you set market data type to delayed, you are telling TWS to automatically switch to delayed market data if the user does not have the necessary real time data subscription. If live data is available a request for delayed data would be ignored by TWS. Delayed market data is returned with delayed Tick Types (Tick ID 66~76).
Delayed Frozen	4	Requests delayed "frozen" data for a user without market data subscriptions.

1.  Need to include tws api python client as a source folder.  Under C\tws\source\python clinet
2.  Note api connect sock.... 7497 is paper, 7496 is live.


There's a way to request certain fields when asking for market data.  See
    https://interactivebrokers.github.io/tws-api/md_request.html
    https://interactivebrokers.github.io/tws-api/tick_types.html

For cash
Error:  0  321   Error validating request:-'bW' : cause - Incorrect generic tick list of 0,1,2,3,4.  Legal ones for (CASH) are:
100(Option Volume),
101(Option Open Interest),
105(Average Opt Volume),
106(impvolat),
107(climpvlt),
125(Bond analytic data),
165(Misc. Stats),
221/220(Creditman Mark Price),
225(Auction),232/221(Pl Price),
233(RTVolume),236(inventory),
258/47(Fundamentals),291(ivclose),
292(Wide_news),293(TradeCount),
294(TradeRate),295(VolumeRate),
318(LastRTHTrade),
370(ParticipationMonitor),
370(ParticipationMonitor),
375(RTTrdVolume),
377(CttTickTag),
377(CttTickTag),
381(IB Rate),
384(RfqTickRespTag),
384(RfqTickRespTag),
387(DMM),
388(Issuer Fundamentals),
391(IBWarrantImpVolCompeteTick),
407(FuturesMargins),
411(rthistvol),
439(MonitorTickTag),
439(MonitorTickTag),
459(RTCLOSE),
460(Bond Factor Multiplier),
499(Fee and Rebate Rate),
511(hvolrt10 (per-underlying)),
512(hvolrt30 (per-underlying)),
513(hvolrt50 (per-underlying)),
514(hvolrt75 (per-underlying)),
515(hvolrt100 (per-underlying)),
516(hvolrt150 (per-underlying)),
517(hvolrt200 (per-underlying)),
521(fzmidptiv),
545(vsiv),
576(EtfNavBidAsk(navbidask)),
577(EtfNavLast(navlast)),
578(EtfNavClose(navclose)),
584(Average Opening Vol.),
585(Average Closing Vol.),
587(Pl Price Delayed),
588(Futures Open Interest),
608(EMA N),
614(EtfNavMisc(hight/low)),
619(Creditman Slow Mark Price),
623(EtfFrozenNavLast(fznavlast)),
645/428(Monetary Close Price),
658(avgv1min),661(ivrank),
662(ivpercntl),663(ivhilo),
664(hvrank),665(hvpercntl),
666(hvhilo),
669(historical ratios),
674(mpmidptiv),
680(awvnoib)

Intresting way to quickly get ping.  USe this function and find the difference between this and SQL Now
    def currentTime(self, time:int):
        """ Server's current time. This method will receive IB server's system
        time resulting after the invokation of reqCurrentTime. """

        self.logAnswer(current_fn_name(), vars())